@page "/institutions"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Instituições</PageTitle>
<style>
    .page {
        font-family: Arial, Helvetica, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        width: 100vw;
        background-color: #1e352f;
    }

    .content {
        width: 90%;
        height: 85%;
    }

    .filter-options {
        display: flex;
        align-items: center;
        justify-content: end;
        margin-bottom: 2em;
    }

    .sort-icon {
        position: relative;
        cursor: pointer;
    }

    .sort-svg {
        width: 2.5em;
        height: 2.5em;
        fill: #A6C36F;
        margin-right: 1em;
    }

    .edit-svg {
        width: 1.5em;
        height: 1.5em;
        margin-left: 1em;
        stroke:#A6C36F
    }

    .edit-options {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .popup-menu {
        display: block;
        position: absolute;
        top: 100%;
        right: 30%;
        background-color: white;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        width: 400%;
    }

    .popup-menu button {
        background: none;
        border: none;
        padding: 0.5em;
        width: 100%;
        text-align: left;
        cursor: pointer;
    }

    .popup-menu button:hover {
        background-color: #f0f0f0;
    }

    .form-control {
        width: 20%;
        padding: 0.5em;
        border-radius: 7px;
        border: 1px solid #ccc;
    }

    .listing {
        display: table;
        width: 100%;
        border-spacing: 0 5px;
    }
    
    .listing-header .listing-entry,
    .listing-content .listing-entry {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .listing-cell {
        flex: 1;
        min-width: 100px;
        padding:  8px;
        text-align: left;
    }

    .listing-header .listing-cell {
        font-weight: bold;
        color: #A6C36F;
        background: transparent;
    }

    .listing-content {
        display: flex;
        flex-direction: column;
        gap: 0.6em;
    }

    .listing-content .listing-entry {
        background-color: #A6C36F;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.2);
    }

    .listing-entry-wrapper {
        display: flex; 
    }

    .listing-content .listing-cell {
        align-content: start;
        margin: 0%;
        border:  none;
    }

    .listing-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1em;
    }

    .sub-title {
        font-size: 1em;
        color:#A6C36F;
    }

    .sub-title-sm {
        font-size: 0.7em;
    }

    .button {
        cursor: pointer;
    }

    .button:hover {
        transform: scale(1.3);
    }

    .hidden {
        opacity: 0;
    }

    .hidden .button {
        cursor: default;
    }

</style>
<div class="page">
    <div class="content">
        <div class="filter-options">
            <div class="sort-icon" @onclick="TogglePopup">
                <svg class="sort-svg" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="#A6C36F"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5M12 17.25h8.25" /></svg>
                @if (isPopupVisible)
                {
                    <div class="popup-menu">
                        <button @onclick="() => SortBy(name)">Ordenar por Nome</button>
                        <button @onclick="() => SortBy(creditsSpend)">Ordenar por Créditos Dispendidos</button>
                    </div>
                }
            </div>
            <input type="text" @bind="filterText" placeholder="Filtrar por nome..." class="form-control" />
        </div>
        <div class="listing">
            @if (institutionList == null || totalCreditosDispendidos.Count != institutionList.Count)
            {
                <p><em>Loading...</em></p>
            }
            else {
            <div class="listing-header">
                <div class="listing-cell sub-title">Nome</div>
                <div class="listing-cell sub-title">NIF</div>
                <div class="listing-cell sub-title">Nº associação</div>
                <div class="listing-cell sub-title">Email</div>
                <div class="listing-cell sub-title">Morada</div>
                <div class="listing-cell sub-title">Créditos Gastos</div>
                @if (isAdmin)
                {
                    <div class="edit-options hidden">
                            <div class="button">
                                <svg class="edit-svg" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.91437 1.95455L7.63415 1.23434C7.7842 1.0843 7.98771 1 8.1999 1C8.4121 1 8.61561 1.0843 8.76566 1.23434C8.9157 1.38439 9 1.5879 9 1.80009C9 2.01229 8.9157 2.2158 8.76566 2.36585L4.23494 6.89656C4.00938 7.12199 3.73121 7.28769 3.42557 7.37869L2.27998 7.72002L2.62131 6.57443C2.71231 6.26879 2.87801 5.99062 3.10344 5.76506L6.91437 1.95455ZM6.91437 1.95455L8.03991 3.08008M7.39992 6.01337V8.04001C7.39992 8.29462 7.29877 8.53879 7.11874 8.71883C6.93871 8.89886 6.69453 9 6.43993 9H1.95999C1.70538 9 1.46121 8.89886 1.28117 8.71883C1.10114 8.53879 1 8.29462 1 8.04001V3.56007C1 3.30547 1.10114 3.06129 1.28117 2.88126C1.46121 2.70123 1.70538 2.60008 1.95999 2.60008H3.98663" stroke-linecap="round" stroke-linejoin="round"/></svg>
                            </div>
                            <div class="button">
                                <svg class="edit-svg" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.32848 3.76937L6.16073 7.46158M3.83927 7.46158L3.67152 3.76937M8.50449 2.45248C8.6703 2.47382 8.83515 2.49638 9 2.52058M8.50449 2.45248L7.98667 8.14792C7.96553 8.3798 7.84173 8.59639 7.64001 8.75436C7.43829 8.91234 7.17353 9.00007 6.89867 9H3.10133C2.82647 9.00007 2.56171 8.91234 2.35999 8.75436C2.15827 8.59639 2.03447 8.3798 2.01333 8.14792L1.49552 2.45248M8.50449 2.45248C7.94491 2.3809 7.38243 2.32658 6.81818 2.28962M1.49552 2.45248C1.3297 2.47341 1.16485 2.49597 1 2.52017M1.49552 2.45248C2.05509 2.3809 2.61757 2.32658 3.18182 2.28962M6.81818 2.28962V1.91383C6.81818 1.42974 6.37697 1.02606 5.80485 1.01088C5.26842 0.996373 4.73158 0.996373 4.19515 1.01088C3.62303 1.02606 3.18182 1.43015 3.18182 1.91383V2.28962M6.81818 2.28962C5.60787 2.21047 4.39213 2.21047 3.18182 2.28962" stroke-linecap="round" stroke-linejoin="round"/></svg>
                            </div>
                        </div>
                }
            </div>
            <div class="listing-content">
                @foreach (var institution in filteredinstitutionList)
                {
                <div class="listing-entry-wrapper">
                    <div class="listing-entry">
                        <div class="listing-cell sub-title-sm">@institution.Value.Nome</div>
                        <div class="listing-cell sub-title-sm">@institution.Value.NIF</div>
                        <div class="listing-cell sub-title-sm">@institution.Value.NumeroAssociacao</div>
                        <div class="listing-cell sub-title-sm">@institution.Value.Email</div>
                        <div class="listing-cell sub-title-sm">@institution.Value.Morada</div>
                        <div class="listing-cell sub-title-sm">@totalCreditosDispendidos[institution.Value.ID.ToString()]</div>
                    </div>
                    @if (isAdmin)
                    {
                        <div class="edit-options">
                            <div class="button" @onclick="() => EditInstitution(institution.Value.ID.ToString())" >
                                <svg class="edit-svg" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.91437 1.95455L7.63415 1.23434C7.7842 1.0843 7.98771 1 8.1999 1C8.4121 1 8.61561 1.0843 8.76566 1.23434C8.9157 1.38439 9 1.5879 9 1.80009C9 2.01229 8.9157 2.2158 8.76566 2.36585L4.23494 6.89656C4.00938 7.12199 3.73121 7.28769 3.42557 7.37869L2.27998 7.72002L2.62131 6.57443C2.71231 6.26879 2.87801 5.99062 3.10344 5.76506L6.91437 1.95455ZM6.91437 1.95455L8.03991 3.08008M7.39992 6.01337V8.04001C7.39992 8.29462 7.29877 8.53879 7.11874 8.71883C6.93871 8.89886 6.69453 9 6.43993 9H1.95999C1.70538 9 1.46121 8.89886 1.28117 8.71883C1.10114 8.53879 1 8.29462 1 8.04001V3.56007C1 3.30547 1.10114 3.06129 1.28117 2.88126C1.46121 2.70123 1.70538 2.60008 1.95999 2.60008H3.98663" stroke-linecap="round" stroke-linejoin="round"/></svg>
                            </div>
                            <div class="button" @onclick="() => RemoveInstitution(institution.Value.ID.ToString())" >
                                <svg class="edit-svg" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.32848 3.76937L6.16073 7.46158M3.83927 7.46158L3.67152 3.76937M8.50449 2.45248C8.6703 2.47382 8.83515 2.49638 9 2.52058M8.50449 2.45248L7.98667 8.14792C7.96553 8.3798 7.84173 8.59639 7.64001 8.75436C7.43829 8.91234 7.17353 9.00007 6.89867 9H3.10133C2.82647 9.00007 2.56171 8.91234 2.35999 8.75436C2.15827 8.59639 2.03447 8.3798 2.01333 8.14792L1.49552 2.45248M8.50449 2.45248C7.94491 2.3809 7.38243 2.32658 6.81818 2.28962M1.49552 2.45248C1.3297 2.47341 1.16485 2.49597 1 2.52017M1.49552 2.45248C2.05509 2.3809 2.61757 2.32658 3.18182 2.28962M6.81818 2.28962V1.91383C6.81818 1.42974 6.37697 1.02606 5.80485 1.01088C5.26842 0.996373 4.73158 0.996373 4.19515 1.01088C3.62303 1.02606 3.18182 1.43015 3.18182 1.91383V2.28962M6.81818 2.28962C5.60787 2.21047 4.39213 2.21047 3.18182 2.28962" stroke-linecap="round" stroke-linejoin="round"/></svg>
                            </div>
                        </div>
                    }
                </div>
                }
            </div>
            }
        </div>
    </div>
</div>

@code {
    private Dictionary<string, Instituition> institutionList = new();
    private string filterText = string.Empty;
    private Dictionary<string, int> totalCreditosDispendidos = new();
    private string currentSort = "name";
    private string name = "name";
    private string creditsSpend = "creditsSpend";
    private bool isPopupVisible = false;
    private bool isAdmin { get; set; } = false;

    [Inject]
    public required LusiumService LusiumService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            institutionList = await LusiumService.ListaInstituicoes();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);

            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole("Admin");

        foreach (var institution in institutionList.Values)
        {
            try
            {
                var totalCreditos = await LusiumService.CalcularCreditosDispendidos(institution.ID);

                totalCreditosDispendidos[institution.ID.ToString()] = totalCreditos;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(ex.Message);

                navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
            }
        }
    }

    private IEnumerable<KeyValuePair<string, Instituition>> filteredinstitutionList
    {
        get
        {
            var query = institutionList.AsEnumerable();

            if (!string.IsNullOrEmpty(filterText))
            {
                query = query.Where(admin => admin.Value.Nome.Contains(filterText, StringComparison.OrdinalIgnoreCase));
            }

            query = currentSort switch
            {
                "name" => query.OrderBy(admin => admin.Value.Nome),
                "creditsSpend" => query.OrderByDescending(admin => totalCreditosDispendidos[admin.Value.ID.ToString()]),
                _ => query
            };

            return query;
        }
    }

    private void OnFilterTextChanged()
    {
        StateHasChanged();
    }

    private void SortBy(string criteria)
    {
        currentSort = criteria;
        StateHasChanged();
    }

    private async Task RemoveInstitution(string institutionId)
    {
        try
        {
            await LusiumService.RemoveUtilizador(institutionId.ToString(), "Institution");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);

            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }
       
        institutionList.Remove(institutionId);
    }

    private void EditInstitution(string institutionId)
    {
        navigationManager.NavigateTo($"/institutions/edit/{institutionId}");
    }

    private void TogglePopup()  
    {
        isPopupVisible = !isPopupVisible;
    }
}
