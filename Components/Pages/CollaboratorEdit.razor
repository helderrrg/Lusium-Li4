@page "/collaborator/edit/{collaboratorID:int}"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Services
@using System.Data
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LusiumService LusiumService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,Institution,Collaborator")]

<style>
    .page {
        font-family: Arial, Helvetica, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        width: 100vw;
        background-color: #1e352f;
    }

    .content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: start;
    }

    .hero-title {
    }

    .main-title {
        font-weight: bold;
        font-size: 3.5em;
        color:#BEEF9E;
    }

    .form-group {
        width: 70%;
        display: flex;
        flex-direction: column;
        justify-content: start;
    }

    .top-text {
        color: #A6C36F;
        padding-left: 5px;
        font-size: 1em;
    }

    .pair {
        margin-top: 20px;
    }

    button {
        margin-top: 40px;
        font-size: 1em;
        text-align: center;
        color: #1e352f;
        border: none;
        padding: 0.5em 0px;
        width: 8em;
        background-color: #A6C36F;
        border-radius: 5px;
        transition: transform 0.2s ease-in-out;
    }

    button:hover {
        transform: scale(1.1);
    }
    
    .info-message-wrapper {
        margin-top: 4em;
        width: 80%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: left;
    }

    .info-message {
        background-color: #ea6565;
        padding: 10px;
        border-radius: 5px;
        color: white;
    }
</style>

<PageTitle>Editar Colaborador</PageTitle>
<div class="page">
    <div class="content">
        <div class="hero-title">
            <h1 class="main-title">Dados Colaborador</h1>
        </div>
        <div class="form-group">
            <div>
                <div class="pair">
                    <label for="nome" class="top-text">Novo Nome</label>
                    <input type="text" class="form-control" id="name" @bind="pendingName"/>
                </div>
                <div class="pair">
                    <label for="birthDate" class="top-text">Nova Data de Nascimento</label>
                    <InputDate TValue="DateOnly?" class="form-control" id="birthDate" @bind-Value="@pendingBirthDate"/>
                </div>
                <div class="pair">
                    <label for="instituicao" class="top-text">Nova Instituição Associada</label>
                    <select class="form-control" id="instituicao" @bind="pendingInstitutionId">
                        <option value="">-- Selecione uma instituição --</option>
                        @foreach (var institution in institutions)
                        {
                            <option value="@institution.Value.ID">@institution.Value.Nome</option>
                        }
                    </select>
                </div>
                @if (isUserCollaborator)
                {
                    <div class="pair">
                        <label for="password" class="top-text">Nova Palavra-Passe</label>
                        <input type="password" class="form-control" id="password" @bind="password" />
                    </div>
                    <div class="pair">
                        <label for="confirmPassword" class="top-text">Confirmar Nova Palavra-Passe</label>
                        <input type="password" class="form-control" id="confirmPassword" @bind="confirmPassword" />
                    </div>
                }
            </div>
            <div>
                <button @onclick="ShowPasswordModal">Alterar Dados</button>
            </div>
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="info-message-wrapper">
                    <div class="info-message">@message</div>
                </div>
            }
        </div>
    </div>
</div>

@if (isModalOpen)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirme a Palavra-passe Atual</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <label for="currentPassword">Palavra-passe Atual</label>
                    <input type="password" class="form-control" id="currentPassword" @bind="currentPassword" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="ConfirmEdit">Confirmar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public int collaboratorID { get; set; }

    private string userID { get; set; } = string.Empty;
    private string userName { get; set; } = string.Empty;
    private string userEmail { get; set; } = string.Empty;
    private DateOnly? birthDate;
    private string selectedInstitutionId = string.Empty;
    Dictionary<string, IUser> institutions = new();

    private string actualUserEmail { get; set; } = string.Empty;

    private string pendingName { get; set; } = string.Empty;
    private DateOnly? pendingBirthDate;
    private string pendingInstitutionId { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string confirmPassword { get; set; } = string.Empty;

    private string currentPassword { get; set; } = string.Empty;
    private string message { get; set; } = string.Empty;

    private bool isModalOpen { get; set; } = false;
    private bool isUserCollaborator { get; set; } = false;
    private bool isUserAdmin { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Collaborator result;
        IUser u;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userID = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            result = await LusiumService.ObterColaborador(collaboratorID.ToString())!;

            if (result != null)
            {
                userName = result.Nome;
                userEmail = result.Email;
                birthDate = result.DataNascimento;
                selectedInstitutionId = result.InstituicaoID.ToString();

                // Populate the form with the current values
                pendingName = userName;
                pendingBirthDate = birthDate;
                pendingInstitutionId = selectedInstitutionId;
            }

            isUserCollaborator = user.IsInRole("Collaborator");
            isUserAdmin = user.IsInRole("Admin");

            if (isUserAdmin)
            {
                u = await LusiumService.ObterUtilizador(userID, "Admin");
            }
            else if (isUserCollaborator)
            {
                u = await LusiumService.ObterUtilizador(userID, "Collaborator");
            }
            else
            {
                u = await LusiumService.ObterUtilizador(userID, "Institution");
            }
            actualUserEmail = u.Email;

            institutions = await LusiumService.ListaUtilizadores("Institution");

            if (user.IsInRole("Institution"))
            {
                var institution = (Instituition)u;
                var collaborators = institution.Colaboradores;
                var collaboratorIDs = collaborators.Select(c => c.ID.ToString()).ToList();

                if (!collaboratorIDs.Contains(collaboratorID.ToString()))
                {
                    navigationManager.NavigateTo("/login");
                }

            } 
            else if (user.IsInRole("Collaborator"))
            {
                if (collaboratorID.ToString() != userID)
                {
                    navigationManager.NavigateTo("/login");
                }
            }
        }
        else
        {
            navigationManager.NavigateTo("/login");
        }
    }

    private void ShowPasswordModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        currentPassword = string.Empty;
    }

    private async Task ConfirmEdit()
    {
        var confirmation = await LusiumService.ValidaPP(actualUserEmail, currentPassword);

        if (confirmation)
        {
            await EditCollaborator();
            CloseModal();
        }
        else
        {
            message = "Palavra-passe atual inválida.";
            CloseModal();
        }
    }

    private async Task EditCollaborator()
    {
        if (password != confirmPassword)
        {
            message = "As palavras-passe não coincidem.";
            CloseModal();
            return;
        }

        // If he didn't change the password, we need to pass the current password just to validate the other fields
        string tempPass = string.Empty;
        if (!string.IsNullOrEmpty(password))
        {
            tempPass = password;
        }
        else
        {
            tempPass = currentPassword;
        }

        string tempName = string.Empty;
        if (!string.IsNullOrEmpty(pendingName) && pendingName != userName)
        {
            tempName = pendingName;
        }
        else
        {
            tempName = userName;
        }

        string tempInstitutionId = string.Empty;
        if (!string.IsNullOrEmpty(pendingInstitutionId) && pendingInstitutionId != selectedInstitutionId)
        {
            tempInstitutionId = pendingInstitutionId;
        }
        else
        {
            tempInstitutionId = selectedInstitutionId;
        }

        DateOnly? tempBirthDate = pendingBirthDate.HasValue && pendingBirthDate != birthDate ? pendingBirthDate : birthDate;

        var valid = false;

        if (tempBirthDate.HasValue)
        {
            valid = await LusiumService.ValidaNovosDadosColaborador(collaboratorID.ToString(), tempName, tempBirthDate.Value, tempInstitutionId, tempPass);
        }
        else
        { 
			message = "Data de nascimento inválida.";
        }

        if (valid)
        {
            await LusiumService.AtualizaDadosColaborador(collaboratorID.ToString(), tempName, tempBirthDate.Value, tempInstitutionId, tempPass);
            message = "Colaborador editado com sucesso.";
        }
        else
        {
            message = "Dados inválidos. Não foi possível editar.";
        }
    }
}