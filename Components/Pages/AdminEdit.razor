@page "/admins/edit"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Services
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LusiumService LusiumService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<style>
    .page {
        font-family: Arial, Helvetica, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        width: 100vw;
        background-color: #1e352f;
    }

    .content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: start;
    }

    .hero-title {
    }

    .main-title {
        font-weight: bold;
        font-size: 3.5em;
        color:#BEEF9E;
    }

    .form-group {
        width: 70%;
        display: flex;
        flex-direction: column;
        justify-content: start;
    }

    .top-text {
        color: #A6C36F;
        padding-left: 5px;
        font-size: 1em;
    }

    .pair {
        margin-top: 20px;
    }

    button {
        margin-top: 40px;
        font-size: 1em;
        text-align: center;
        color: #1e352f;
        border: none;
        padding: 0.5em 0px;
        width: 8em;
        background-color: #A6C36F;
        border-radius: 5px;
        transition: transform 0.2s ease-in-out;
    }

    button:hover {
        transform: scale(1.1);
    }
    
    .info-message-wrapper {
        margin-top: 4em;
        width: 80%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: left;
    }

    .failed-message {
        background-color: #ea6565;
        padding: 10px;
        border-radius: 5px;
        color: white;
    }

    .success-message {
        background-color: #A6C36F;
        padding: 10px;
        border-radius: 5px;
        color: white;
    }

</style>

<PageTitle>Editar Administrador</PageTitle>
<div class="page">
    <div class="content">
        <div class="hero-title">
            <h1 class="main-title"> Dados Administrador</h1>
        </div>
        <div class="form-group">
            <div>
                <div class="pair">
                    <label for="nome" class="top-text">Novo Nome</label>
                    <input type="text" class="form-control" id="name" @bind="pendingName" />
                </div>
                <div class="pair">
                    <label for="password" class="top-text">Nova Palavra-passe</label>
                    <input type="password" class="form-control" id="password" @bind="password" />
                </div>
                <div class="pair">
                    <label for="confirmPassword" class="top-text">Confirmar Nova Palavra-passe</label>
                    <input type="password" class="form-control" id="confirmPassword" @bind="confirmPassword" />
                </div>
            </div>
            <div>
                <button @onclick="ShowPasswordModal">Alterar Dados</button>
            </div>
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="info-message-wrapper">
                    <div class="info-message @(editSuccess ? "success-message" : "failed-message")">@message</div>
                </div>
            }
        </div>
    </div>
</div>

@if (isModalOpen)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirme a Palavra-passe Atual</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <label for="currentPassword">Palavra-passe Atual</label>
                    <input type="password" class="form-control" id="currentPassword" @bind="currentPassword" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="ConfirmEdit">Confirmar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string userID { get; set; } = string.Empty;
    private string userName { get; set; } = string.Empty;
    private string userEmail { get; set; } = string.Empty;

    private string pendingName { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string confirmPassword { get; set; } = string.Empty;

    private string currentPassword { get; set; } = string.Empty;
    private string message { get; set; } = string.Empty;
    private bool editSuccess { get; set; } = false;

    Administrator? result;

    private bool isModalOpen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userID = user.FindFirst(ClaimTypes.NameIdentifier)?.Value!;
            userEmail = user.FindFirst(ClaimTypes.Email)?.Value ?? "Email não encontrado";

            try
            {
                result = await LusiumService.ObterAdministrador(userID);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(ex.Message);

                navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
            }

            if (result != null)
            {
                userName = result.Nome;
            }

            pendingName = userName;
        }
        else
        {
            navigationManager.NavigateTo("/login");
        }
    }

    private void ShowPasswordModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        currentPassword = string.Empty;
    }

    private async Task ConfirmEdit()
    {
        bool confirmation = false;

        try
        {
            confirmation = await LusiumService.ValidaPP(userEmail, currentPassword);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);

            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }

        if (confirmation)
        {
            await EditAdmin();
            CloseModal();
        }
        else
        {
            message = "Palavra-passe atual inválida.";
            editSuccess = false;
            CloseModal();
        }
    }

    private async Task EditAdmin()
    {
        if (password != confirmPassword)
        {
            message = "As palavras-passe não coincidem.";
            editSuccess = false;
            CloseModal();
            return;
        }

        // If he didn't change the password, we need to pass the current password just to validate the other fields
        string tempPass = string.Empty;
        if (!string.IsNullOrEmpty(password))
        {
            tempPass = password;
        }
        else
        {
            tempPass = currentPassword;
        }

        string tempName = string.Empty;
        if (pendingName != userName || string.IsNullOrEmpty(pendingName))
        {
            tempName = pendingName;
        }
        else
        {
            tempName = userName;
        }

        bool valid = false;

        try
        {
            valid = await LusiumService.ValidaNovosDadosAdministrador(userID, tempName, tempPass);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);

            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }

        if (valid)
        {

            try
            {
                await LusiumService.AtualizaDadosAdministrador(userID, tempName, tempPass);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(ex.Message);

                navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
            }

            message = "Administrador editado com sucesso.";
            editSuccess = true;
        }
        else
        {
            message = "Dados inválidos. Não foi possível editar.";
            editSuccess = false;
        }
    }
}
