@page "/login"

@using Data
@using Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Data
@using Services
@inject LusiumDbContext lusiumDbContext
@inject NavigationManager navigationManager


<style>
    .page {
        font-family: Arial, Helvetica, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        width: 100vw;
        background-color: #1e352f;
    }

    .content {
        display: flex;
        flex-direction: column;
        width: 350px;
    }

    .content .main-title {
        text-align: center;
    }

    .main-title {
        font-weight: bold;
        font-size: 3em;
        color:#BEEF9E;
        margin-bottom: 30px;
    }

    .top-text {
        color: #A6C36F;
        padding-left: 5px;
        font-size: 1em;
    }

    .pair {
        margin-top: 20px;
    }

    button {
        margin-top: 25px;
        font-size: 1em;
        text-align: center;
        color: #1e352f;
        border: none;
        padding: 0.5em 0px;
        width: 8em;
        background-color: #A6C36F;
        border-radius: 5px;
        transition: transform 0.2s ease-in-out;
    }

    button:hover {
        transform: scale(1.1);
    }

    .info-message {
        background-color: #ea6565;
        padding-top: 2px;
        padding-bottom: 2px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 5px;
        margin-top: 2px;
        color: white;
    }

</style>


<div class="page">
    <div class="content">
        @if (isAdminToChangePassword)
        {
            <AdminEditComponent userId="@userId" userName="@userName" />
        }
        else
        {
            <EditForm Model="@Model" OnValidSubmit="AutenticarUtilizador" FormName="LoginForm">
                <DataAnnotationsValidator />
                <div class="main-title">Iniciar Sessão</div>
                <div class="mb-3">
                    <div class="pair">
                        <label for="email" class="top-text">Email</label>
                        <InputText id="email" @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                    </div>
                    <ValidationMessage class="info-message" For="() => Model.Email" />
                </div>
                <div class="mb-3">
                    <div class="pair">
                        <label for="password" class="top-text">Palavra-passe</label>
                        <InputText id="password" @bind-Value="Model.Password" class="form-control" placeholder="Palavra-passe" type="password" />
                    </div>
                    <ValidationMessage class="info-message" For="() => Model.Password" />
                </div>
                <div class="mb-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>
                <div class="d-grid">
                    <button type="submit">Iniciar Sessão</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string errorMessage = string.Empty;
    private bool isAdminToChangePassword = false;
    private string userId = string.Empty;
    private string userName = string.Empty;

    [Inject]
    public required LusiumService LusiumService { get; set; }

    private async Task AutenticarUtilizador()
    {
        if (string.IsNullOrEmpty(Model.Email) || string.IsNullOrEmpty(Model.Password))
        {
            errorMessage = "Email e palavra-passe são obrigatórios.";
            return;
        }

        DataTable result = await LusiumService.ValidaCredenciais(Model.Email, Model.Password);

        if (result.Rows.Count == 0)
        {
            errorMessage = "Email ou palavra-passe inválidos.";
            return;
        }

        var id = result.Rows[0]["ID"].ToString();
        var name = result.Rows[0]["Nome"].ToString();
        var role = result.Rows[0]["Role"].ToString();
        var validAdmin = result.Rows[0].Table.Columns.Contains("Validado") ? result.Rows[0]["Validado"].ToString() : null;

        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(name) || string.IsNullOrEmpty(role))
        {
            errorMessage = "Erro ao recuperar informações do utilizador.";
            return;
        }

        if (role == "Admin" && validAdmin == "False")
        {
            isAdminToChangePassword = true;
            userId = id;
            userName = name;
            return;
        }

        await FinalizarLogin(id, name, Model.Email, role);
    }

    private async Task FinalizarLogin(string id, string name, string email, string role)
    {
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, id),
            new Claim(ClaimTypes.Email, email),
            new Claim(ClaimTypes.Role, role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}
