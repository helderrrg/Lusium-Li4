@page "/login"

@using Data
@using Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Data
@using Services
@inject LusiumDbContext lusiumDbContext
@inject NavigationManager navigationManager

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="col-lg-4">
        @if (isAdminToChangePassword)
        {
            <AdminEditComponent userId="@userId" userName="@userName" />
        }
        else
        {
            <EditForm Model="@Model" OnValidSubmit="AutenticarUtilizador" FormName="LoginForm">
                <DataAnnotationsValidator />
                <div class="text-center mb-4">
                    <h2 class="fw-bold">Iniciar Sessão</h2>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                    <ValidationMessage For="() => Model.Email" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Palavra-Passe</label>
                    <InputText id="password" @bind-Value="Model.Password" class="form-control" placeholder="Palavra-Passe" type="password" />
                    <ValidationMessage For="() => Model.Password" />
                </div>
                <div class="mb-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg">Iniciar Sessão</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string errorMessage = string.Empty;
    private bool isAdminToChangePassword = false;
    private string userId = string.Empty;
    private string userName = string.Empty;

    [Inject]
    public required LusiumService LusiumService { get; set; }

    private async Task AutenticarUtilizador()
    {
        if (string.IsNullOrEmpty(Model.Email) || string.IsNullOrEmpty(Model.Password))
        {
            errorMessage = "Email e palavra-passe são obrigatórios.";
            return;
        }

        DataTable result = await LusiumService.ValidaCredenciais(Model.Email, Model.Password);

        if (result.Rows.Count == 0)
        {
            errorMessage = "Email ou palavra-passe inválidos.";
            return;
        }

        var id = result.Rows[0]["ID"].ToString();
        var name = result.Rows[0]["Nome"].ToString();
        var role = result.Rows[0]["Role"].ToString();
        var validAdmin = result.Rows[0].Table.Columns.Contains("Validado") ? result.Rows[0]["Validado"].ToString() : null;

        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(name) || string.IsNullOrEmpty(role))
        {
            errorMessage = "Erro ao recuperar informações do utilizador.";
            return;
        }

        if (role == "Admin" && validAdmin == "False")
        {
            isAdminToChangePassword = true;
            userId = id;
            userName = name;
            return;
        }

        await FinalizarLogin(id, name, Model.Email, role);
    }

    private async Task FinalizarLogin(string id, string name, string email, string role)
    {
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, id),
            new Claim(ClaimTypes.Name, name),
            new Claim(ClaimTypes.Email, email),
            new Claim(ClaimTypes.Role, role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}
