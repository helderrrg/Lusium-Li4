@page "/institution/edit/{institutionID:int}"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Services
@using System.Data
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LusiumService LusiumService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,Institution")]

<html>
<head>
    <style>
        .page {
            font-family: Arial, Helvetica, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            width: 100vw;
            background-color: #1e352f;
        }

        .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 72%;
            height: @(isAdmin ? "60%" : "72%");
            justify-content: space-between;
        }

        .hero-title {
        }

        .main-title {
            font-weight: bold;
            font-size: 3.5em;
            color:#BEEF9E;
        }

        .form-group {
            width: 80%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .top-text {
            color: #A6C36F;
            padding-left: 5px;
            font-size: 1em;
        }

        .pair {
            margin-top: 20px;
        }

        .credits-info {
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
        }

        .current-credits-wrapper {
            margin-left: 5px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .current-credits-text {
            color: #A6C36F;
            font-size: 1em;
        }

        .current-credits-number {
            font-size: 1.5em;
            font-weight: bold;
            color: #A6C36F;
            margin-right: 7px;
        }

        .value-and-img {
            display: flex;
            justify-content: end;
            align-items: center;
        }

        button {
            font-size: 1em;
            text-align: center;
            color: #1e352f;
            border: none;
            padding: 0.5em 0px;
            width: 8em;
            background-color: #A6C36F;
            border-radius: 5px;
            transition: transform 0.2s ease-in-out;
        }

        button:hover {
            transform: scale(1.1);
        }
        
    </style>

    <PageTitle>Editar Instituição</PageTitle>
</head>
<body>

    <div class="page">
        <div class="content">
            <div class="herro-title">
                <h1 class="main-title">Dados Instituição</h1>
            </div>
            <div class="form-group">
                <div>
                    <div class="pair">
                        <label for="nome" class="top-text">Novo Nome</label>
                        <input type="text" class="form-control" id="name" @bind="pendingName" placeholder="ex: @userName" />
                    </div>
                    <div class="pair">
                        <label for="morada" class="top-text">Nova Morada</label>
                        <input type="text" class="form-control" id="adress" @bind="pendingAdress" placeholder="ex: @userAdress" />
                    </div>

                    @if(!isAdmin)
                    {
                        <div class="pair">
                            <label for="password" class="top-text">Nova Palavra-Passe</label>
                            <input type="password" class="form-control" id="password" @bind="password" />
                        </div>
                        <div class="pair">
                            <label for="confirmPassword" class="top-text">Confirmar Nova Palavra-Passe</label>
                            <input type="password" class="form-control" id="confirmPassword" />
                        </div>
                    }

                    @if (isAdmin)
                    {
                        <div class="credits-info">
                            <div class="current-credits-wrapper">
                                <label for="credits" class="current-credits-text">Créditos Atuais</label>
                                <div class="value-and-img">
                                    <label for="credits" class="current-credits-number"> @institutionCredits</label>
                                    <svg width="20" height="20" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 12L1.65464 9.5978C1.25128 9.3748 1 8.94424 1 8.47604V3.49512M6 12L10.3454 9.5978C10.7488 9.3748 11 8.94424 11 8.47604V3.49512M6 12V8.1728M1 3.49512L5.42256 1.14427C5.78444 0.951911 6.21556 0.951911 6.57744 1.14427L11 3.49512M1 3.49512L4.35101 5.34763M11 3.49512L7.649 5.34763M6 8.1728C7.03556 8.1728 7.875 7.31608 7.875 6.2592C7.875 5.92917 7.79313 5.61866 7.649 5.34763M6 8.1728C4.96444 8.1728 4.125 7.31608 4.125 6.2592C4.125 5.92917 4.20687 5.61866 4.35101 5.34763M4.35101 5.34763C4.66844 4.75079 5.28787 4.3456 6 4.3456C6.71213 4.3456 7.33156 4.75079 7.649 5.34763" stroke="#646A75" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
                                </div>
                            </div>
                            <div>
                                <label for="credits" class="top-text">Novos Créditos</label>
                                <input type="number" class="form-control" id="credits" @bind="pendingCredits" min="0" placeholder="ex: @institutionCredits" />
                            </div>
                        </div>
                    }
                </div>
                <div>
                    <button @onclick="ShowPasswordModal">Alterar Dados</button>
                    <p>@message</p>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@if (isModalOpen)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirme a Palavra-Passe Atual</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <label for="currentPassword">Palavra-Passe Atual</label>
                    <input type="password" class="form-control" id="currentPassword" @bind="currentPassword" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="ConfirmEdit">Confirmar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public int institutionID { get; set; }

    private string userID { get; set; } = string.Empty;
    private string userName { get; set; } = string.Empty;
    private string userAdress { get; set; } = string.Empty;
    private string userEmail { get; set; } = string.Empty;
    private int institutionCredits { get; set; } = 0;
    private bool isAdmin { get; set; } = false;

    private string pendingName { get; set; } = string.Empty;
    private string pendingAdress { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string confirmPassword { get; set; } = string.Empty;
    private string currentPassword { get; set; } = string.Empty;
    private int pendingCredits { get; set; } = 0;
    private string message { get; set; } = string.Empty;

    private bool isModalOpen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Instituition result;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userID = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            isAdmin = user.IsInRole("Admin");

            result = await LusiumService.ObterInstituicao(userID)!;

            if (result != null)
            {
                userName = result.Nome;
                userEmail = result.Email;
                userAdress = result.Morada;
                institutionCredits = result.Creditos;
            }
        }
        else
        {
            navigationManager.NavigateTo("/login");
        }
    }

    private void ShowPasswordModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        currentPassword = string.Empty;
    }

    private async Task ConfirmEdit()
    {
        var confirmation = await LusiumService.ValidaPP(userEmail, currentPassword);

        if (confirmation)
        {
            await EditInstitution();
            CloseModal();
        }
        else
        {
            message = "Palavra-passe atual inválida.";
            CloseModal();
        }
    }

    private async Task EditInstitution()
    {
        if (password != confirmPassword)
        {
            message = "As palavras-passe não coincidem.";
            CloseModal();
            return;
        }

        string tempPass = string.IsNullOrEmpty(password) ? currentPassword : password;
        string tempName = string.IsNullOrEmpty(pendingName) ? userName : pendingName;
        string tempAdress = string.IsNullOrEmpty(pendingAdress) ? userAdress : pendingAdress;
        int tempCredits = isAdmin && pendingCredits >= 0 ? pendingCredits : institutionCredits;

        var valid = await LusiumService.ValidaNovosDadosInstituicao(institutionID.ToString(), tempName, tempAdress, tempPass, tempCredits);

        if (valid)
        {
            await LusiumService.AtualizaDadosInstituicao(institutionID.ToString(), tempName, tempAdress, tempPass, tempCredits);
            message = "Instituição editada com sucesso, as alterações serão refletidas no próximo início de sessão.";
        }
        else
        {
            message = "Dados inválidos. Não foi possível editar.";
        }
    }
}
