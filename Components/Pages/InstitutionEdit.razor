@page "/institution/edit"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Services
@using System.Data
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LusiumService LusiumService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,Institution")]

<PageTitle>Editar Instituição</PageTitle>

<h1>Editar Instituição</h1>

<div class="form-group">
    <label for="nome">Nome</label>
    <input type="text"class="form-control" id="name" @bind="pendingName" placeholder="@userName" />

    <label for="morada">Morada</label>
    <input type="text" class="form-control" id="adress" @bind="pendingAdress" placeholder="@userAdress" />

    <label for="password">Nova Palavra-Passe</label>
    <input type="password" class="form-control" id="password" @bind="password" />

    <label for="confirmPassword">Confirmar Nova Palavra-Passe</label>
    <input type="password" class="form-control" id="confirmPassword" @bind="confirmPassword" />
</div>

<button @onclick="ShowPasswordModal">Alterar Dados</button>

<p>@message</p>

@if (isModalOpen)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirme a Palavra-Passe Atual</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <label for="currentPassword">Palavra-Passe Atual</label>
                    <input type="password" class="form-control" id="currentPassword" @bind="currentPassword" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="ConfirmEdit">Confirmar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string userID { get; set; } = string.Empty;
    private string userName { get; set; } = string.Empty;
    private string userAdress { get; set; } = string.Empty;
    private string userEmail { get; set; } = string.Empty;
    Dictionary<string, IUser> institutions = new();

    private string pendingName { get; set; } = string.Empty;
    private string pendingAdress { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string confirmPassword { get; set; } = string.Empty;

    private string currentPassword { get; set; } = string.Empty;
    private string message { get; set; } = string.Empty;

    private bool isModalOpen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Instituition result;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userID = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            result = await LusiumService.ObterInstituicao(userID)!;

            if (result != null)
            {
                userName = result.Nome;
                userEmail = result.Email;
                userAdress = result.Morada;
            }

        }
        else
        {
            navigationManager.NavigateTo("/login");
        }
    }

    private void ShowPasswordModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        currentPassword = string.Empty;
    }

    private async Task ConfirmEdit()
    {
        var confirmation = await LusiumService.ValidaPP(userEmail, currentPassword);

        if (confirmation)
        {
            await EditInstitution();
            CloseModal();
        }
        else
        {
            message = "Palavra-passe atual inválida.";
            CloseModal();
        }
    }

    private async Task EditInstitution()
    {
        if (password != confirmPassword)
        {
            message = "As palavras-passe não coincidem.";
            CloseModal();
            return;
        }

        // If he didn't change the password, we need to pass the current password just to validate the other fields
        string tempPass = string.Empty;
        if (!string.IsNullOrEmpty(password))
        {
            tempPass = password;
        }
        else
        {
            tempPass = currentPassword;
        }

        string tempName = string.Empty;
        if (!string.IsNullOrEmpty(pendingName) && pendingName != userName)
        {
            tempName = pendingName;
        }
        else
        {
            tempName = userName;
        }

        string tempAdress = string.Empty;
        if (!string.IsNullOrEmpty(pendingAdress) && pendingAdress != userAdress)
        {
            tempAdress = pendingAdress;
        }
        else
        {
            tempAdress = userAdress;
        }

        var valid = await LusiumService.ValidaNovosDadosInstituicao(userID, tempName, tempAdress, tempPass);


        if (valid)
        {
            await LusiumService.AtualizaDadosInstituicao(userID, tempName, tempAdress, tempPass);
            message = "Instituição editada com sucesso, as alterações serão refletidas no próximo início de sessão.";

            // [TODO] Update the user's name in the claims
        }
        else
        {
            message = "Dados inválidos. Não foi possível editar.";
        }
    }
}
